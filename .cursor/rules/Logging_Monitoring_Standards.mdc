### ğŸš€ Wolvox-WooCommerce Entegrasyonu - Sistem Ä°zleme ve Loglama StandartlarÄ±

Bu belge, **tÃ¼m sistemin nasÄ±l loglanacaÄŸÄ±nÄ±, hata kayÄ±tlarÄ±nÄ±n nasÄ±l tutulacaÄŸÄ±nÄ± ve sistem izleme sÃ¼reÃ§lerinin nasÄ±l iÅŸleyeceÄŸini** belirler. **TÃ¼m hata ve olay kayÄ±tlarÄ± takip edilebilir ve analiz edilebilir olmalÄ±dÄ±r.**

---

## ğŸ“Œ 1. Genel Loglama KurallarÄ±
âœ” **TÃ¼m sistem olaylarÄ± merkezi bir log sisteminde tutulmalÄ±dÄ±r.**
âœ” **Hata loglarÄ± detaylÄ± ve yorumlanabilir olmalÄ±dÄ±r.**
âœ” **Loglar otomatik dÃ¶ngÃ¼ye alÄ±nmalÄ± ve disk doluluÄŸunu Ã¶nlemek iÃ§in temizlenmelidir.**
âœ” **GerÃ§ek zamanlÄ± log izleme saÄŸlanmalÄ±dÄ±r.**

---

## ğŸ“Œ 2. Loglama Seviyeleri
âœ” **FarklÄ± log seviyeleri tanÄ±mlanmalÄ±dÄ±r:**
   - `DEBUG`: Hata ayÄ±klama iÃ§in dÃ¼ÅŸÃ¼k seviyeli bilgiler.
   - `INFO`: Normal sistem olaylarÄ± ve operasyonlar.
   - `WARNING`: Potansiyel tehlikeli durumlar.
   - `ERROR`: Ä°ÅŸleyiÅŸi bozan hatalar.
   - `CRITICAL`: Acil mÃ¼dahale gerektiren durumlar.

ğŸ“Œ **Ã–rnek Log FormatÄ±:**
```json
{
    "timestamp": "2025-02-03T14:05:23",
    "level": "ERROR",
    "module": "woocommerce_sync",
    "message": "ÃœrÃ¼n senkronizasyonu baÅŸarÄ±sÄ±z oldu",
    "details": "WooCommerce API baÄŸlantÄ± hatasÄ± (HTTP 500)"
}
```

ğŸ“Œ **Ã–rnek Python Loglama YapÄ±sÄ±:**
```python
import logging
import json

logging.basicConfig(filename='logs/system.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

def log_event(level, module, message, details=""):
    log_data = {
        "timestamp": logging.Formatter.formatTime(logging.Formatter(), None),
        "level": level,
        "module": module,
        "message": message,
        "details": details
    }
    logging.log(getattr(logging, level), json.dumps(log_data))
```

---

## ğŸ“Œ 3. Hata Loglama StandartlarÄ±
âœ” **Hatalar detaylÄ± bir ÅŸekilde kaydedilmelidir.**
âœ” **Hata mesajlarÄ± iÃ§inde Ã§aÄŸrÄ±lan modÃ¼l, hata tipi ve detaylarÄ± bulunmalÄ±dÄ±r.**
âœ” **Kritik hatalar gerÃ§ek zamanlÄ± bildirim mekanizmasÄ± ile yÃ¶neticilere iletilmelidir.**

ğŸ“Œ **Ã–rnek Hata Loglama:**
```python
import logging

logging.basicConfig(filename='logs/errors.log', level=logging.ERROR,
                    format='%(asctime)s - %(levelname)s - %(message)s')

def log_error(module, error_message):
    logging.error(f"ModÃ¼l: {module} | Hata: {error_message}")
```

ğŸ“Œ **Ã–rnek GerÃ§ek ZamanlÄ± Bildirim Entegrasyonu:**
```python
import requests

def notify_admin(message):
    """Kritik hatalarÄ± Slack veya e-posta ile yÃ¶neticilere bildirir."""
    webhook_url = "https://hooks.slack.com/services/XXX/YYY/ZZZ"
    payload = {"text": message}
    requests.post(webhook_url, json=payload)
```

---

## ğŸ“Œ 4. GerÃ§ek ZamanlÄ± Log Ä°zleme
âœ” **GerÃ§ek zamanlÄ± log izleme iÃ§in `ELK Stack (Elasticsearch, Logstash, Kibana)` veya `Graylog` gibi araÃ§lar entegre edilmelidir.**
âœ” **Sistem Ã¼zerindeki anormal aktiviteler tespit edilmeli ve yÃ¶neticilere raporlanmalÄ±dÄ±r.**
âœ” **Loglar API ve web panel Ã¼zerinden izlenebilir olmalÄ±dÄ±r.**

ğŸ“Œ **Ã–rnek Graylog KonfigÃ¼rasyonu:**
```yaml
input:
  gelf:
    port: 12201
    bind_address: 0.0.0.0
    tls_cert_file: /etc/graylog/cert.pem
    tls_key_file: /etc/graylog/key.pem
```

---

## ğŸ“Œ 5. Log Temizleme ve DÃ¶ngÃ¼ YÃ¶netimi
âœ” **Eski loglar otomatik olarak temizlenmelidir.**
âœ” **Log dosya boyutu belirli bir sÄ±nÄ±rÄ±n Ã¼zerine Ã§Ä±kmamalÄ±dÄ±r.**
âœ” **Loglar, belirli bir sÃ¼renin ardÄ±ndan arÅŸivlenmeli veya silinmelidir.**

ğŸ“Œ **Ã–rnek Otomatik Log Temizleme (Linux Cronjob):**
```bash
0 0 * * 1 find /var/logs/ -name "*.log" -type f -mtime +30 -delete
```

---

Bu belge **katÄ± kurallar iÃ§ermektedir** ve **bu kurallara uyulmadan sistem izleme yapÄ±lamaz.** ğŸš€