### ğŸš€ Wolvox-WooCommerce Entegrasyonu - Loglama ve Hata YÃ¶netimi StandartlarÄ±

Bu belge, **loglama ve hata yÃ¶netimi sÃ¼reÃ§lerini** belirler. TÃ¼m hata yÃ¶netimi ve gÃ¼nlÃ¼kleme iÅŸlemleri **tutarlÄ±, detaylÄ± ve izlenebilir olmalÄ±dÄ±r**.

---

## ğŸ“Œ 1. Genel Kurallar
âœ” **TÃ¼m iÅŸlemler loglanmalÄ±dÄ±r.**
   - **BaÅŸarÄ±lÄ± ve baÅŸarÄ±sÄ±z iÅŸlemler kayÄ±t altÄ±na alÄ±nmalÄ±dÄ±r.**
   - **Loglarda detaylÄ± bilgi bulunmalÄ±dÄ±r (timestamp, hata tÃ¼rÃ¼, Ã§aÄŸÄ±ran modÃ¼l vb.).**

âœ” **Hata yÃ¶netimi merkezi bir yapÄ± Ã¼zerinden gerÃ§ekleÅŸtirilmelidir.**
   - **TÃ¼m hatalar `error_handler.py` Ã¼zerinden iÅŸlenmelidir.**
   - **Kritik hatalar e-posta veya bildirim servisi ile yÃ¶neticilere iletilmelidir.**

âœ” **Log seviyeleri (Logging Levels) net olarak belirlenmelidir.**
   - `DEBUG`: Hata ayÄ±klama iÃ§in dÃ¼ÅŸÃ¼k seviyeli bilgi.
   - `INFO`: Genel Ã§alÄ±ÅŸma bilgileri.
   - `WARNING`: Potansiyel sorunlar.
   - `ERROR`: Ä°ÅŸleyiÅŸi bozan hatalar.
   - `CRITICAL`: Acil mÃ¼dahale gerektiren hatalar.

âœ” **Hata mesajlarÄ± aÃ§Ä±klayÄ±cÄ± ve sistematik olmalÄ±dÄ±r.**
   - **Kodun hangi satÄ±rÄ±nda, hangi fonksiyonda hata oluÅŸtuÄŸu aÃ§Ä±kÃ§a belirtilmelidir.**
   - **Ã–zel hata mesajlarÄ± tanÄ±mlanmalÄ± ve hata ayÄ±klama sÃ¼reci kolaylaÅŸtÄ±rÄ±lmalÄ±dÄ±r.**

---

## ğŸ“Œ 2. Loglama StandartlarÄ±
âœ” **TÃ¼m log kayÄ±tlarÄ± `logs/integration.log` dosyasÄ±nda tutulmalÄ±dÄ±r.**
âœ” **Loglar JSON formatÄ±nda olmalÄ± ve detay iÃ§ermelidir.**
âœ” **Ä°lgili servisler ve iÅŸlemler hangi log seviyesinde Ã§alÄ±ÅŸacaÄŸÄ± belirlenmelidir.**

ğŸ“Œ **Ã–rnek Log FormatÄ±:**
```json
{
    "timestamp": "2025-02-03T14:05:23",
    "level": "ERROR",
    "module": "woocommerce_product_service",
    "message": "ÃœrÃ¼n senkronizasyonu baÅŸarÄ±sÄ±z oldu",
    "details": "WooCommerce API baÄŸlantÄ± hatasÄ± (HTTP 500)"
}
```

ğŸ“Œ **Ã–rnek Python Loglama Sistemi:**
```python
import logging
import json

logging.basicConfig(
    filename='logs/integration.log', level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def log_event(level, module, message, details=""):
    log_data = {
        "timestamp": logging.Formatter.formatTime(logging.Formatter(), None),
        "level": level,
        "module": module,
        "message": message,
        "details": details
    }
    logging.log(getattr(logging, level), json.dumps(log_data))
```

---

## ğŸ“Œ 3. Hata YÃ¶netimi StandartlarÄ±
âœ” **TÃ¼m hatalar merkezi hata yÃ¶netimi dosyasÄ± olan `error_handler.py` Ã¼zerinden ele alÄ±nacaktÄ±r.**
âœ” **Hata mesajlarÄ± anlaÅŸÄ±lÄ±r ve yÃ¶nlendirici olmalÄ±dÄ±r.**
âœ” **Kritik hatalar iÃ§in yÃ¶neticilere e-posta bildirimleri veya Slack/Webhook entegrasyonu saÄŸlanmalÄ±dÄ±r.**

ğŸ“Œ **Ã–rnek Hata YÃ¶netimi Sistemi:**
```python
import logging

def handle_error(exception, module):
    """HatalarÄ± loglayÄ±p yÃ¶neticilere bildiren fonksiyon."""
    error_message = f"ModÃ¼l: {module} | Hata: {str(exception)}"
    logging.error(error_message)
    notify_admin(error_message)

def notify_admin(message):
    """Kritik hatalarÄ± yÃ¶neticilere e-posta ile bildirir."""
    print(f"UYARI! YÃ¶neticiye bildirildi: {message}")  # GerÃ§ek ortamda e-posta gÃ¶nderimi yapÄ±lacaktÄ±r.
```

---

## ğŸ“Œ 4. Kritik Hata Bildirimleri
âœ” **Kritik hatalar anlÄ±k olarak yÃ¶neticilere iletilmelidir.**
âœ” **Slack, e-posta veya Telegram API entegrasyonu kullanÄ±labilir.**
âœ” **API hatalarÄ± veya WooCommerce baÄŸlantÄ± sorunlarÄ± Ã¶ncelikli olarak ele alÄ±nmalÄ±dÄ±r.**

ğŸ“Œ **Ã–rnek Slack Bildirim Entegrasyonu:**
```python
import requests

def notify_slack(message):
    """Kritik hatalarÄ± Slack kanalÄ±na ileten fonksiyon."""
    webhook_url = "https://hooks.slack.com/services/XXX/YYY/ZZZ"
    payload = {"text": message}
    requests.post(webhook_url, json=payload)
```

---

Bu belge **katÄ± kurallar iÃ§ermektedir** ve **bu kurallara uyulmadan loglama ve hata yÃ¶netimi yapÄ±lamaz.** ğŸš€

