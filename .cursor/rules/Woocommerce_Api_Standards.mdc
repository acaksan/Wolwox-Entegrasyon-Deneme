---
description: 
globs: 
---
### ğŸš€ Wolvox-WooCommerce Entegrasyonu - WooCommerce API Entegrasyon StandartlarÄ±

Bu belge, **WooCommerce API ile entegrasyon sÃ¼recinin nasÄ±l yÃ¶netileceÄŸini**, **veri aktarÄ±mÄ±nÄ± nasÄ±l optimize edeceÄŸimizi** ve **gÃ¼venliÄŸi nasÄ±l saÄŸlayacaÄŸÄ±mÄ±zÄ±** tanÄ±mlar. 

---

## ğŸ“Œ 1. Genel Kurallar
âœ” **TÃ¼m WooCommerce API Ã§aÄŸrÄ±larÄ± merkezi bir servis Ã¼zerinden gerÃ§ekleÅŸtirilecektir.**
   - **TÃ¼m API iÅŸlemleri `services/woocommerce_service.py` iÃ§inde yÃ¶netilecektir.**
   - **Rastgele API Ã§aÄŸrÄ±larÄ± yerine, tÃ¼m iÅŸlemler belirlenen servisler Ã¼zerinden yapÄ±lmalÄ±dÄ±r.**

âœ” **API istekleri optimize edilmelidir.**
   - **Gereksiz tekrar eden isteklerden kaÃ§Ä±nÄ±lmalÄ±dÄ±r.**
   - **WooCommerce API Ã§aÄŸrÄ±larÄ± asenkron (`async`) olarak yapÄ±lmalÄ±dÄ±r.**

âœ” **WooCommerce API baÄŸlantÄ± bilgileri `.env` dosyasÄ±nda saklanmalÄ±dÄ±r.**
   - **API anahtarlarÄ± doÄŸrudan kod iÃ§inde bulunmamalÄ±dÄ±r.**

âœ” **Her API Ã§aÄŸrÄ±sÄ± loglanmalÄ± ve hata durumlarÄ± raporlanmalÄ±dÄ±r.**
   - **BaÅŸarÄ±sÄ±z iÅŸlemler `logs/api_errors.log` dosyasÄ±na yazÄ±lmalÄ±dÄ±r.**
   - **WooCommerce API yanÄ±tlarÄ± gerektiÄŸinde kaydedilmelidir.**

---

## ğŸ“Œ 2. WooCommerce API BaÄŸlantÄ± YÃ¶netimi
âœ” **WooCommerce API baÄŸlantÄ± bilgileri `.env` iÃ§inde tanÄ±mlanmalÄ±dÄ±r.**

ğŸ“Œ **WooCommerce API BaÄŸlantÄ± Bilgileri:**
```
WOOCOMMERCE_URL=https://lastik-al.com
WOOCOMMERCE_KEY=ck_14ca8aab6f546bb34e5fd7f27ab0f77c6728c066
WOOCOMMERCE_SECRET=cs_62e4007a181e06ed919fa469baaf6e3fac8ea45f
WOOCOMMERCE_VERIFY_SSL=True
WOOCOMMERCE_API_VERSION=wc/v3

# WordPress kimlik bilgileri
WORDPRESS_USERNAME=wolvox
WORDPRESS_PASSWORD=Ac1476ac.!
```

ğŸ“Œ **Ã–rnek WooCommerce API YÃ¶netimi:**
```python
import os
import aiohttp

class WooCommerceService:
    def __init__(self):
        self.base_url = os.getenv("WOOCOMMERCE_URL") + "/wp-json/" + os.getenv("WOOCOMMERCE_API_VERSION") + "/"
        self.auth = aiohttp.BasicAuth(os.getenv("WOOCOMMERCE_KEY"), os.getenv("WOOCOMMERCE_SECRET"))

    async def fetch(self, endpoint):
        """WooCommerce API'den veri Ã§eker."""
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{self.base_url}{endpoint}", auth=self.auth, ssl=os.getenv("WOOCOMMERCE_VERIFY_SSL")) as response:
                return await response.json()

    async def post(self, endpoint, data):
        """WooCommerce API'ye veri gÃ¶nderir."""
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{self.base_url}{endpoint}", json=data, auth=self.auth, ssl=os.getenv("WOOCOMMERCE_VERIFY_SSL")) as response:
                return await response.json()
```

---

## ğŸ“Œ 3. WooCommerce API KullanÄ±m SenaryolarÄ±

### ğŸŸ¢ **ÃœrÃ¼n Getirme (`get_products()`)**
ğŸ“Œ **Ã–rnek API Ã‡aÄŸrÄ±sÄ±:**
```python
async def get_products(self):
    """WooCommerce'den tÃ¼m Ã¼rÃ¼nleri getirir."""
    return await self.fetch("products")
```

---

### ğŸŸ¢ **ÃœrÃ¼n GÃ¼ncelleme (`update_product()`)**
ğŸ“Œ **Ã–rnek API Ã‡aÄŸrÄ±sÄ±:**
```python
async def update_product(self, product_id, data):
    """WooCommerce Ã¼rÃ¼nÃ¼nÃ¼ gÃ¼nceller."""
    return await self.post(f"products/{product_id}", data)
```

---

### ğŸŸ¢ **Stok GÃ¼ncelleme (`update_stock()`)**
ğŸ“Œ **Ã–rnek API Ã‡aÄŸrÄ±sÄ±:**
```python
async def update_stock(self, product_id, stock_quantity):
    """WooCommerce stok gÃ¼ncelleme iÅŸlemi."""
    data = {"stock_quantity": stock_quantity}
    return await self.post(f"products/{product_id}", data)
```

---

## ğŸ“Œ 4. API Performans Optimizasyonu
âœ” **API Ã§aÄŸrÄ±larÄ± Ã¶nbelleÄŸe alÄ±nmalÄ±dÄ±r (Redis).**
âœ” **AynÄ± veriyi tekrar tekrar almak yerine Ã¶nbellekten Ã§ekilmelidir.**
âœ” **YoÄŸun API Ã§aÄŸrÄ±larÄ± iÃ§in `batch processing` uygulanmalÄ±dÄ±r.**

ğŸ“Œ **Ã–rnek Redis Ã–nbellekleme KullanÄ±mÄ±:**
```python
import aioredis
import json

class CacheService:
    def __init__(self):
        self.redis = aioredis.from_url("redis://localhost")
    
    async def get_cached_data(self, key):
        """Ã–nbellekten veri alÄ±r."""
        data = await self.redis.get(key)
        return json.loads(data) if data else None
    
    async def set_cached_data(self, key, value, expire=3600):
        """Ã–nbelleÄŸe veri ekler."""
        await self.redis.set(key, json.dumps(value), ex=expire)
```

---

## ğŸ“Œ 5. Hata YÃ¶netimi
âœ” **WooCommerce API hatalarÄ± `logs/api_errors.log` dosyasÄ±na kaydedilmelidir.**
âœ” **Kritik hatalar iÃ§in bildirim mekanizmasÄ± olmalÄ±dÄ±r.**
âœ” **WooCommerce API rate limit aÅŸÄ±mlarÄ±na karÅŸÄ± Ã¶nlem alÄ±nmalÄ±dÄ±r.**

ğŸ“Œ **Ã–rnek Hata YÃ¶netimi:**
```python
import logging

def handle_api_error(error_message, endpoint):
    """WooCommerce API hatalarÄ±nÄ± loglar ve yÃ¶neticilere bildirir."""
    logging.error(f"{endpoint} Ã§aÄŸrÄ±sÄ±nda hata: {error_message}")
    notify_admin(f"WooCommerce API hatasÄ±: {error_message}")

def notify_admin(message):
    """YÃ¶neticiye e-posta/SMS/Slack bildirimi gÃ¶nderir."""
    print(f"UYARI! YÃ¶neticiye bildirildi: {message}")  # GerÃ§ek sistemde mail/sms gÃ¶nderimi yapÄ±lÄ±r.
```

---

Bu belge **katÄ± kurallar iÃ§ermektedir** ve **bu kurallara uyulmadan WooCommerce API entegrasyonu gerÃ§ekleÅŸtirilemez.** ğŸš€

