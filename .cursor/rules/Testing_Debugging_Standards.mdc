### ğŸš€ Wolvox-WooCommerce Entegrasyonu - Test ve Hata AyÄ±klama StandartlarÄ±

Bu belge, **test sÃ¼reÃ§lerinin nasÄ±l yÃ¶netileceÄŸini, hata ayÄ±klamanÄ±n nasÄ±l yapÄ±lacaÄŸÄ±nÄ± ve yazÄ±lÄ±mÄ±n stabil Ã§alÄ±ÅŸmasÄ±nÄ± saÄŸlamak iÃ§in alÄ±nmasÄ± gereken Ã¶nlemleri** belirler. **TÃ¼m testler otomatikleÅŸtirilmeli ve dÃ¼zenli olarak Ã§alÄ±ÅŸtÄ±rÄ±lmalÄ±dÄ±r.**

---

## ğŸ“Œ 1. Genel Test KurallarÄ±
âœ” **TÃ¼m kodlar test edilmeden canlÄ± sisteme alÄ±nmamalÄ±dÄ±r.**
âœ” **Ãœnite (Unit), Entegrasyon (Integration) ve KullanÄ±cÄ± Kabul (UAT) testleri yapÄ±lmalÄ±dÄ±r.**
âœ” **Testler otomatik olarak CI/CD sÃ¼reÃ§lerine entegre edilmelidir.**
âœ” **Hata ayÄ±klama mekanizmalarÄ± geliÅŸtirme aÅŸamasÄ±nda aktif edilmelidir.**

---

## ğŸ“Œ 2. Test TÃ¼rleri
âœ” **Ãœnite Testleri (Unit Tests):** Bireysel modÃ¼lleri ve fonksiyonlarÄ± test eder.
âœ” **Entegrasyon Testleri (Integration Tests):** FarklÄ± sistemlerin birlikte Ã§alÄ±ÅŸmasÄ±nÄ± doÄŸrular.
âœ” **Fonksiyonel Testler (Functional Tests):** Sistemin beklenen iÅŸlemleri yerine getirdiÄŸini doÄŸrular.
âœ” **YÃ¼k Testleri (Load Tests):** Sistemin yoÄŸun trafikte nasÄ±l Ã§alÄ±ÅŸtÄ±ÄŸÄ±nÄ± belirler.
âœ” **KullanÄ±cÄ± Kabul Testleri (UAT):** Son kullanÄ±cÄ± deneyimini doÄŸrular.

ğŸ“Œ **Ã–rnek Test Ã‡erÃ§evesi:**
```python
import unittest
from services.woocommerce_service import WooCommerceService

class TestWooCommerceAPI(unittest.TestCase):
    def setUp(self):
        self.woo_service = WooCommerceService()

    def test_get_products(self):
        response = self.woo_service.get_products()
        self.assertIsInstance(response, list)
        self.assertGreater(len(response), 0)

if __name__ == "__main__":
    unittest.main()
```

---

## ğŸ“Œ 3. Hata AyÄ±klama (Debugging) SÃ¼reci
âœ” **Hata raporlama mekanizmasÄ± kullanÄ±lmalÄ±dÄ±r.**
âœ” **Loglar hata ayÄ±klama sÄ±rasÄ±nda detaylÄ± bilgi iÃ§ermelidir.**
âœ” **Hatalar sÄ±nÄ±flandÄ±rÄ±lmalÄ± ve Ã¶nceliklendirilmelidir.**
âœ” **GerÃ§ek zamanlÄ± hata izleme iÃ§in Sentry veya benzeri bir sistem entegre edilmelidir.**

ğŸ“Œ **Ã–rnek Python Debugging KullanÄ±mÄ±:**
```python
import logging

def divide(a, b):
    try:
        return a / b
    except ZeroDivisionError as e:
        logging.error(f"Hata: {e}")
        return None
```

ğŸ“Œ **Ã–rnek Sentry Entegrasyonu:**
```python
import sentry_sdk
sentry_sdk.init("https://your-dsn@sentry.io/project")

try:
    1 / 0  # SÄ±fÄ±ra bÃ¶lme hatasÄ±
except Exception as e:
    sentry_sdk.capture_exception(e)
```

---

## ğŸ“Œ 4. Test Otomasyonu ve CI/CD Entegrasyonu
âœ” **Testler CI/CD pipeline iÃ§inde otomatik olarak Ã§alÄ±ÅŸtÄ±rÄ±lmalÄ±dÄ±r.**
âœ” **BaÅŸarÄ±sÄ±z olan testler dÃ¼zeltmeden canlÄ±ya alÄ±nmamalÄ±dÄ±r.**
âœ” **Test kapsamÄ± %80'in altÄ±nda olmamalÄ±dÄ±r.**
âœ” **Sistem testleri belirli periyotlarla otomatik olarak Ã§alÄ±ÅŸtÄ±rÄ±lmalÄ±dÄ±r.**

ğŸ“Œ **Ã–rnek GitHub Actions Test Pipeline:**
```yaml
name: CI Test Pipeline

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kod
        uses: actions/checkout@v2
      
      - name: Python ortamÄ±nÄ± hazÄ±rla
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      
      - name: BaÄŸÄ±mlÄ±lÄ±klarÄ± yÃ¼kle
        run: pip install -r requirements.txt
      
      - name: Testleri Ã§alÄ±ÅŸtÄ±r
        run: pytest
```

---

Bu belge **katÄ± kurallar iÃ§ermektedir** ve **bu kurallara uyulmadan yazÄ±lÄ±m test sÃ¼reÃ§leri tamamlanamaz.** ğŸš€